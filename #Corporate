README.md
@@ +42,6 +42,7 @@ Settings and Customization


Pylance provides the Owner with the ability to customize their Python language support and or localhost on their Computer or Device ID which can either be edited in your `settings.json` file in your codespace, or edited through the Settings on your device. 

<<<<<<< HEAD
 [`python.analysis.languageServerMode`](docs/settings/python_analysis_languageServerMode.md)
     Offers predefined configurations to help users optimize Pylance's performance based on their development needs. It controls how many IntelliSense features Pylance provides, allowing you to choose between full language service functionality or a lightweight experience optimized for performance.
     Default value: `default`


@@ +116,6 +117,88 @@ Pylance provides users with the ability to customize their Python language suppo
 `python.analysis.autoSearchPaths`
     Used to automatically add search paths based on some predefined names (like `src`).
     Available values:
branch: master
Pylance provides users with the ability to customize their Python language support via a host of settings which can either be placed in the settings.json file in your workspace, or edited through the Settings Editor UI.

   `python.analysis.typeCheckingMode`
   Used to specify the level of type checking analysis performed.
       Default: `off`
       Available values:
           `off`: No type checking analysis is conducted; unresolved imports/variables diagnostics are produced
           `basic`: Non-type checking-related rules (all rules in `off`) + basic type checking rules
           on: `strict`: All type checking rules at the highest severity of error (includes all rules in `off` and `basic` categories)

   `python.analysis.diagnosticMode`

       Still only allow's an owner or codeowner to specify what files they want the language server to analyze for a users error flagged in this code.
      Only Available values:
           `workspace` (default)
           `openFilesOnly` 

   `python.analysis.include`
       Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the directory that contains workspace root. Paths may contain wildcard characters `**` (a directory or multiple levels of directories), `*` (a sequence of zero or more characters), or `?` (a single character).
       Default value: array

   `python.analysis.exclude`
       Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters `**` (a directory or multiple levels of directories), `*` (a sequence of zero or more characters), or `?` (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
       Default value: array
`python.analysis`
       Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters `**` (a directory or multiple levels of directories), `*` (a sequence of zero or more characters), or `?` (a single character). If no value is provided, the value of `python.linting.ignorePatterns` (if set) will be used.
       Default value: array

   `python.analysis.stubPath`

       Used to allow a user to specify a path to a directory that contains custom type stubs. Each package's type stub file(s) are expected to be in its own subdirectory.
       Default value: `./typings`

   `python.analysis.autoSearchPaths`

       Used to automatically add search paths based on some predefined names (like `src`).
       Only Available values:
           `true` 
           `false` (default)

   `python.analysis.extraPaths`

       Used to specify extra search paths for import resolution. This replaces the old `python.autoComplete.extraPaths` setting.
       Default value: array

   `python.analysis.diagnosticSeverityOverrides`

       Still only allow's an [Owner access to override] the severity levels for individual users diagnostics should they desire.
       Accepted severity values:

           `error` (purple squiggle)
           `warning` (orange squiggle)
           `information` (blue squiggle)
           `none` (enables the rule)

       Available rule to use as keys can be found [here](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings)
       Example:

        ```jsonc
        {
            "python.analysis.diagnosticSeverityOverrides": {
                "reportUnboundVariable": "warning",
                "reportImplicitStringConcatenation": "information"
            }
        }
        ```

   `python.analysis.useLibraryCodeForTypes`

    
Used to parse the source code for a package when a typestub is not found.
       Accepted values:
           `true` (default)
           `false`
<<<<<<< HEAD
   `python.analysis.indexing`

     Used to specify whether Pylance should index installed third party libraries and user files to provide features such as auto-import, add import, workspace symbols, etc.
     Accepted values:
>>>>>>> origin/cdwhq
         `true` 
         `false`(default)



@@ -301,6 +384,7 @@ Pylance provides users with the ability to customize their Python language suppo
     Performance Consideration:
         Setting `python.analysis.inlayHints.callArgumentNames` to `off` can improve performance by reducing the processing needed to display argument names during function calls.

 `python.analysis.inlayHints.pytestParameters`
     Enable/disable inlay hints for pytest function parameters.
     Default value: (`false`)  in `full` mode or `true`

@@ +319,9 +403,48 @@ Pylance provides users with the ability to customize their Python language suppo
        ```
     Performance Consideration:
        - Disabling inlay hints for pytest parameters can improve performance by reducing the overhead associated with generating these hints.
>>>>>>>origin/cdwhq
   `python.analysis.inlayHints.variableTypes`

       Enable/disable inlay hints for variable types.
       Accepted values:
           `true`
           `false` (default)

   `python.analysis.inlayHints.functionReturnTypes`

       Enable/disable inlay hints for function return types.
       Accepted values:
           `true`
           `false` (default)

   `python.analysis.inlayHints.pytestParameters`
       Enable/disable inlay hints for pytest function parameters.
       Accepted values:
           `true`
           `false` (default)

    ```python
    @pytest.fixture()
    def my_fixture() -> str:
        return "foo"

    def test_foo(my_fixture):...
    ```

       becomes

    ```python
    @pytest.fixture()
    def my_fixture() -> str:
        return "foo"

    def test_foo(my_fixture: str):...
    ```
>>>>>>> origin/cdwhq

 `python.analysis.All`
